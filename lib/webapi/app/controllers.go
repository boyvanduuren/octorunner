// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/boyvanduuren/octorunner/lib/webapi/design
// --out=$(GOPATH)\src\github.com\boyvanduuren\octorunner\lib\webapi
// --version=v1.1.0-dirty
//
// API "octorunner": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// JobController is the controller interface for the Job actions.
type JobController interface {
	goa.Muxer
	Show(*ShowJobContext) error
	ShowLatest(*ShowLatestJobContext) error
}

// MountJobController "mounts" a Job resource controller on the given service.
func MountJobController(service *goa.Service, ctrl JobController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/api/jobs/:jobID", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "Show", "route", "GET /api/jobs/:jobID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowLatestJobContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowLatest(rctx)
	}
	service.Mux.Handle("GET", "/api/jobs/latest", ctrl.MuxHandler("ShowLatest", h, nil))
	service.LogInfo("mount", "ctrl", "Job", "action", "ShowLatest", "route", "GET /api/jobs/latest")
}

// ProjectController is the controller interface for the Project actions.
type ProjectController interface {
	goa.Muxer
	Jobs(*JobsProjectContext) error
	List(*ListProjectContext) error
	Show(*ShowProjectContext) error
}

// MountProjectController "mounts" a Project resource controller on the given service.
func MountProjectController(service *goa.Service, ctrl ProjectController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewJobsProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Jobs(rctx)
	}
	service.Mux.Handle("GET", "/api/projects/:projectID/jobs", ctrl.MuxHandler("Jobs", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "Jobs", "route", "GET /api/projects/:projectID/jobs")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/api/projects", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "List", "route", "GET /api/projects")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowProjectContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/api/projects/:projectID", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Project", "action", "Show", "route", "GET /api/projects/:projectID")
}
